#version 330 core
out vec4 FragColor;
  
//in vec3 ourColor;
//in vec2 texCoord;
in vec3 normal;
in vec3 fragPos;

//uniform sampler2D firstTexture;
//uniform sampler2D secondTexture;

uniform vec3 lightPos;  //the position of the light source
uniform vec3 viewPos;
uniform vec3 objectColor;
uniform vec3 lightColor;

uniform float specularStrength;
uniform float ambientStrength;
uniform float shininess;

void main() {
    //FragColor = mix(texture(firstTexture, texCoord), texture(secondTexture, texCoord), 0.5);
    //FragColor = texture(firstTexture, texCoord);

    
    vec3 norm = normalize(normal);
    vec3 lightDir = normalize(lightPos - fragPos);
    vec3 viewDir = normalize(viewPos - fragPos);
    vec3 reflectDir = reflect(-lightDir, normal);

    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    vec3 specular = specularStrength * spec * lightColor;

    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;

    vec3 ambient = ambientStrength * lightColor;
    vec3 result = (ambient + diffuse + specular) * objectColor;
    FragColor = vec4(result, 1.0);
}