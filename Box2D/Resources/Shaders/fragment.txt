#version 330 core
out vec4 FragColor;

in vec2 texCoords;
in vec3 normal;
in vec3 fragPos;

struct Material {
    sampler2D diffuse;
    vec3      specular;
    float     shininess;
};

struct Light {
    vec3 position;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    //for directional light
    vec3 direction;
};

uniform sampler2D texture_diffuse0;
uniform sampler2D texture_specular0;

uniform vec3 lightPos;
uniform vec3 viewPos;

uniform Light light;
uniform Material material;

void main() {
    vec3 ambient = light.ambient * vec3(texture(texture_diffuse0, texCoords));

    vec3 norm = normal;
    //vec3 lightDir = normalize(lightPos - fragPos);  //for point light  
    vec3 lightDir = normalize(-light.direction);  //for directional light
    float diff = max(dot(norm, lightDir), 0);
    vec3 diffuse = light.diffuse * diff * vec3(texture(texture_diffuse0, texCoords));

    vec3 viewDir = normalize(viewPos - fragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0), 32);
    vec3 specular = light.specular * spec * vec3(texture(texture_specular0, texCoords));

    vec3 result = (diffuse + ambient + specular);

    FragColor = vec4(result, 1.0);

}